		Build ebpf, samples/bpf on am572x (armv7) ?
		Test xdp on am572x (armv7) ?
		This shor README describes this

This README contains simple steps to start testing xdp on cpsw TI AM572x SoC
(arm v7). Can be changed while xdp evolution, and number of required patches
is going to be less or even absent in the future. Based on net-next/master LK v.

Prerequisites:
~$ - command on host
~# - command on target board

1)
Needed patches for net-next/master LK v5.3-rc3
------------------------------------------------

p1 is to enable ebpf/xdp options:

p1: https://github.com/ikhorn/af_xdp_stuff/commit/bd0b2ace3a30046f1186dd5bc7fba0cadfd3ac84
p2: https://github.com/ikhorn/af_xdp_stuff/commit/bdd9aff24eabea5205b197d42f08e168d79c88a3
p3: https://github.com/ikhorn/af_xdp_stuff/commit/2c6c6d538605aac39600dcb3c9b66de11c70b963
p4: https://github.com/ikhorn/af_xdp_stuff/commit/aa645ccca4d844f404ec3c2b27402d4d7848d1b5
p5: https://github.com/ikhorn/af_xdp_stuff/commit/221bcb43f548189c1bc645256e7874894774bfd1
p6: https://github.com/ikhorn/af_xdp_stuff/commit/5facd1e056e94f9c0121d61ceec88d6e6fa06982
p7: https://github.com/ikhorn/af_xdp_stuff/commit/41944f748479bc384f068068f2f4d1d2e81b6b57
p8: https://github.com/ikhorn/af_xdp_stuff/commit/74a6bee964cc0f0685b7c61afd97fd03f0500864




2)
config kernel with omap2plus_defconfig involved (I use my own merged config,
you can use your) and build zImage along with dtb needed. Or, enable the
following options added by patch p1:
CONFIG_JIT=y
CONFIG_BPFILTER=y
CONFIG_BPF_SYSCALL=y
CONFIG_XDP_SOCKETS=y
CONFIG_BPF_EVENTS=y
CONFIG_HAVE_EBPF_JIT=y
CONFIG_BPF_JIT=y
CONFIG_CGROUP_BPF=y

3)
Update kernel image, dtb, modules and kernel headers on remote target.

4)
If you don't want to bother with kernel samples and want simply test xdp
support on cpsw you can skip a little and go to step 15). To be able to build
eBPF C written programs, the clang with bpf support should be present (it creates
like arch independent bytecode obj that is verified and compiled by JIT directly
in the kernel). At this moment clang and llc is not present in tiSDK, so I've
corss-compiled clang for arm v7 and compiled eBPF progs on the target board in
order to not copy it each time. This allows to attach eBPF programs with ip tool
to XDP driver hook w/o any samples from kernel tree. Also it's required to build
samples/bpf from kernel tree directly on the board. How to prepare clang and
llvm for am572x TI sdk read README_build_llvm_clang.

5)
I didn't cross compile bpf samples on host, so the following is needed at lest
for now: kernel sources are needed to build bpf examples directly on the target
board (not so much time), so create kernel snapshot:
~$ git archive HEAD --format tgz -o snapshot_to_transfer.tgz

6)
Move snapshot to some folder SNAPSHOT on the target board and untar.
(I didn't use NFS, it requires usb/Eth dongle to test network driver w/o
headache):
~# cd SNAPSHOT
~# tar -zxvf snapshot_to_transfer.tgz && rm -rf snapshot_to_transfer.tgz

7)
The kernel snapshot can have incorrect "access time" for files that
can loop normal build, so update access times on the files:
~# find . -type f | xargs -n 4 touch

8)
Distclean:
~# make distclean

9)
Make configuration on the target board (copy defconfig from host first):
~# make ARCH=arm ti_sdk_dra7x_release_defconfig

10)
Clean samples/bpf and tools to be sure everything is from scratch:
~# cd samples/bpf
~# make clean
~# cd tools/bpf
~# make clean
~# cd ../..

11)
For sure, update kernel headers from the snapshot (must):
~# make ARCH=arm headers_install

12)
Build bpf examples:
~# cd samples/bpf
~# make -j2 ARCH=arm

13)
verify AF_XDP socket example in drop mode (drops packets in userspace APP)
./xdpsock -i eth0 -q 0 -r -N
you can stop it by ctr + C

14)
verify AF_XDP socket in tx mode (from userspace APP)
./xdpsock -i eth0 -q 0 -t -N
you can stop it by ctr + C

15)
More examples can be seen here (xdp eBPF progs integrated):
~# cd samples/bpf/

./bpf/xdp_redirect_kern.c
./bpf/xdp_tx_iptunnel_user.c
./bpf/xdpsock_kern.c
./bpf/xdp1_user.c
./bpf/xdp_sample_pkts_user.c
./bpf/xdp_rxq_info_user.c
./bpf/xdp_tx_iptunnel_kern.c
./bpf/xdp_router_ipv4_kern.c
./bpf/xdp_adjust_tail_kern.c                        xdp1
./bpf/xdp_sample_pkts_kern.c                        xdp_monitor
./bpf/xdp_monitor_kern.c                            xdp_tx_iptunnel
./bpf/xdp_redirect_map_user.c      ---------\       xdp_fwd
./bpf/xdp_redirect_cpu_kern.c       compiled X      xdp_sample_pkts
./bpf/xdp_monitor_user.c           ---------/       xdp_adjust_tail
./bpf/xdp_fwd_user.c                                xdp_rxq_info
./bpf/xdp2skb_meta.sh                               xdp2
./bpf/xdpsock.h                                     xdp_redirect
./bpf/xdp_adjust_tail_user.c                        xdp_redirect_cpu
./bpf/xdp_redirect_user.c                           xdp_redirect_map
./bpf/xdp2_kern.c                                   xdp_router_ipv4
./bpf/xdp_rxq_info_kern.c                           xdpsock
./bpf/xdp_redirect_cpu_user.c
./bpf/xdp_redirect_map_kern.c
./bpf/xdp2skb_meta_kern.c
./bpf/xdpsock_user.c
./bpf/xdp_fwd_kern.c
./bpf/xdp_router_ipv4_user.c
./bpf/xdp1_kern.c
./bpf/xdp_tx_iptunnel_common.h

To verify if bpf progs for embedding in kernel are built correctly use
llvm-objdump, for instance:
~#j llvm-objdump -S xdp1_kern.o

If it's incorrect some kernel files can have similar size or no bpf
instructions.

XDP_TX run on target board:
~# ./xdp2 eth0

And then send some UDP packet from host and observe same echoed packet with
swapped sa and da addresses.

XDP_DROP run on target board:
~# ./xdp1 eth0

XDP_REDIRECT take idx of the interfaces with and run:
~# ip link show
~# ./xdp_redirect 2 3

AF_XDP socket drop:
~# ./xdpsock -i eth0 -r

16)
if you don't want to bother with af_xdp support and kernel samples, you can
write your own simplest eBPF xdp-example prog and do the following steps
(for this only cpsw support is needed, p1, p2, p3 patches only):
~# cat xdp-example.c
#include <linux/bpf.h>

int xdp_drop_all(struct xdp_md *ctx)
{
        return XDP_DROP;
}

You can do what ever you need with packet and return one of the values:
XDP_ABORTED, XDP_DROP, XDP_PASS, XDP_TX, XDP_REDIRECT.

17)
build xdp-example eBPF prog obj with clang (at least with bpf support, can do on host):
~# clang -O2 -Wall -target bpf -c xdp-example.c -o xdp-example.o

18)
attach xdp-example eBPF drop prog to the cpsw driver with ip tool:
~# ip link set dev eth0 xdp obj xdp-example.o sec .text

19)
unload xdp program with ip command:
~# ip link set dev eth0 xdp off
After this driver works in regular "skb" mode
